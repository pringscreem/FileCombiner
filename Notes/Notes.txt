July 4, 2024 
    -Updating MSYS2 to try to get g++ (the C++ compiler) working.
    -Success: g++ working (produced compile error).
    -Basic version working (everything on one line).
    -Working, except the class includes need to be removed from the combined file (the header includes).

July 5, 2024
    -Started writing a class.
    -Remember to do all of the basics (boilerplate) for setting up a class (i.e. include header file, semi-colon 
     after class declaration).
    -"#pragma once" is only used in header files (specifically designed for them).
    -The argv variable might have to be accessed differently because it is a pointer.  Something isn't right with 
     the way that I was using it.

July 6, 2024
    -Help() function to print the instructions.
    -Right now, just combine files into a single output file.  This can be expanded later to remove the includes of 
     included classes (Is the original C++ version, i.e. the linker, doing this recursively (would explain a lot)?).

July 7, 2024
    -Testing to make sure it works in the MSYS2 (mingw) folder.
    -Rename Main.cpp to TestGame.cpp (makes more sense).
    -Chat-GPT has excellent answers to related C++ questions so far.  Some of them require thorough reading to see 
     why they are good.
   
July 8, 2024
    -Switch to home setup.
    -Compile, test.
    -Compiling fine, executing fine.  Not actually creating or modifying an existing output file.
    -Still have to compile manually with MSYS2 (MinGW, g++).
    -Compiling and working now.
    -Output file compiles and runs if I manually remove the class includes (i.e. #include "Game.h").
    -Chat-GPT found errors quickly.  Again, these errors seemed like they could have been caught 
     by proofreading and making sure the code is actually doing everything that it is supposed to do.
    -The next step is to create a function to remove the class name includes from the file.
    -It is possible to do this by checking the string of each getline() call, but if it was 
     necessary to search the whole document, regular expressions would be useful (although you 
     could search using getline again if everything is assumed to be on its' own line).
    -Not clear what is going wrong with the check to skip the include class line.

July 9, 2024
    -The problem seems to be that the check is happening for the current inputFileName, which means 
     that it is only checking for the correct "#include" in the header file in question itself.
     If there were an "#include "Game.h"" in the Game.h file itself, it would remove this. 
     As it is, in the Game.cpp file, it is checking for "#include "Game.cpp"". 
     The solution is to loop through all the filenames and check for them.
    -Now correctly checking the include statements with filenames, but only the first of three 
     times.  Lines are bieng copied three times, but the include statement with a filename from 
     the input file list (argv) is only being copied twice.  This means that the inner loop is 
     copying the line three times before moving on to the next line.

July 10, 2024
    -Rewrote the nested loops for copying the files.  Changed the erroneous structure to the 
     correct structure.
    -There was still a bug using std::string::npos.  It was treating the result as the opposite 
     of what we were looking for, i.e. what should have indicated a match was indicating no match 
     and vice versa.
    -std::string::npos in this context is used as a return value to show that there were no matches.
     Paraphrasing https://cplusplus.com/reference/string/string/npos/ .

July 12, 2024
    -Renamed Run() to Combine() and added a Run() function that checks for "help" or "combine" 
     in argv[1].
    -Removed function parameters from Combine() (formerly Run()).
    -It is compiling and working properly (OutputFile compiles and runs), after typo fix ("argv[i]").
    -There is a type mismatch between argv[1] and the strings it is compared to for "help" and "combine".
    -argv[1] is probably a C-Style String (i.e. a pointer to a char array).

July 14, 2024
    -strcmp() seems to be the best way to check for command line arguments that can be used as commands.
    -strcmp() returns zero if the strings are identical, which is usually "false".  It returns a 
     non-zero value when the strings don't match.
    -It was relatively easy to add different version of the combine function by copy/pasting and 
     modifying the function.
    -Copy/pasting the combine function means that there is repeated code, which violates "Don't 
     Repeat Yourself" (DRY).

July 15, 2024
    -strcmp() is probably subtracting one string value from the other under the hood (hence the
     zero return value).  Actual: compares character by character until a difference is found, 
     doing bitwise comparison of each character.  It's possible the bitwise comparison is a 
     subtraction.  I might be able to check this by reading the strcmp() source code.
    -When you look at the source code that Visual Studio is using for C++, it is in the Windows 
     folders, which makes it clear that it is showing the Microsoft implementation ("_Check_return_" 
     is part of Microsoft's labeling system (they call it "annotation")).
    -It probably is doing a "characterwise" subtraction, because it can be used to order strings 
     alphabetically, which means it can compare character values.
    -ChatGPT disagrees (-1, 0, or 1 return for less than, equal to, or greater than).
    -cppreference says the same thing, on closer reading (only returning the sign of the 
     subtraction result).
    -Created a redesign of the Combine function (could be improved with function pointers).

July 16, 2024
    -Added issues.  Some of these will lead to future tasks (e.g. finding test suite options).
    -Added README file.
    -Moved files into folders, deleted some of the old output files.
    -Added Review Document Notes for recording worthwhile observations and notes for future work.
    -Put a disclaimer about AI in the README.
    -It looks like I have to write a destructor in order to use a function pointer.
    -The algorithm is probably wildly inefficient, but it doesn't matter for its' purposes here.

July 17, 2024
    -Fixed random number generation in the number guessing game.  The issue was that the random 
     number was first not being initialized (I must have left it as a task for later) and then 
     that it was being initialized before the variables that it depended on for randomization.
     This was happening because C++ uses the declaration order of the variables in the class 
     declaration, even if the order in the initialization list (in the constructor) is different.
     Moving the randomNumber variable below the random number generation variables fixed this.
    -Added to Review Notes.
    -The function pointer redesign will probably be easier to think through on paper first.

July 25, 2024
    -Continue